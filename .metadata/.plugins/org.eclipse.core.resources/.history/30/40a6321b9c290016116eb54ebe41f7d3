/*
 * Copyright (c) 2015, 2016 arduino-menusystem
 * Licensed under the MIT license (see LICENSE)
 */

#ifndef MENUSYSTEM_H
#define MENUSYSTEM_H

class MenuSystem;

class MenuComponent
{
    friend class MenuSystem;
public:
    MenuComponent(const char* name);

    void set_name(const char* name);

    /**
     * Returns the composite name
     *
     * The composite name is the original _name plus _value if applicable.
     * Do not call this from inside the numberFormat function (infinite loop).
     */

    /**
     * Gets the original name
     *
     * Returns the original name assigned in the constructor or via set_name.
     */
    const char* get_name() const;

    virtual MenuComponent* select() = 0;
    virtual void reset() = 0;

    /**
     * Returns true if the MenuComponent's value is being edited; false
     * otherwise.
     */
    virtual bool is_editing_value() const { return false; }

protected:
    virtual bool next_value() { return false; }
    virtual bool prev_value() { return false; }

    const char* _name;
};


class MenuItem : public MenuComponent
{
public:
    MenuItem(const char* name);

    void set_select_function(void (*on_select)(MenuItem*));

    virtual MenuComponent* select();
    virtual void reset();

protected:
    void (*_on_select)(MenuItem*);
};

/**
 * A MenuItem executes MenuSystem::back() when selected.
 */
class BackMenuItem : public MenuItem
{
public:
    BackMenuItem(MenuSystem* ms, const char* name = "back");

    virtual MenuComponent* select();

protected:
    MenuSystem* menu_system;
};


class Menu : public MenuComponent
{
    friend class MenuSystem;
public:
    Menu(const char* name);

    bool next(bool loop=false);
    bool prev(bool loop=false);
    MenuComponent* activate();
    virtual MenuComponent* select();
    virtual void reset();

    void add_item(MenuItem* pItem, void (*on_select)(MenuItem*) = 0);
    Menu const* add_menu(Menu* pMenu);

    void set_parent(Menu* pParent);
    Menu const* get_parent() const;

    MenuComponent const* get_selected() const;
    MenuComponent const* get_menu_component(int (index)) const;

    int get_num_menu_components() const;
    int get_cur_menu_component_num() const;

private:
    MenuComponent* _p_sel_menu_component;
    MenuComponent** _menu_components;
    Menu* _p_parent;
    int _num_menu_components;
    int _cur_menu_component_num;
};


class MenuSystem
{
public:
    MenuSystem();

    bool next(bool loop=false);
    bool prev(bool loop=false);
    void reset();
    void select(bool reset=false);
    bool back();

    void set_root_menu(Menu* p_root_menu);

    Menu const* get_current_menu() const;

private:
    Menu* _p_root_menu;
    Menu* _p_curr_menu;
};


#endif
